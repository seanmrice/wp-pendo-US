# yamllint disable rule:line-length
name: Test

on: push

jobs:
  yaml-lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: 'Yamllint'
        uses: ibiqlik/action-yamllint@v3
        with:
          config_data: |
            extends: default
            rules:
              document-start:
                present: false
              truthy:
                check-keys: false

  php-lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: michaelw90/PHP-Lint@master

  php-syntax:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php: [5.6, 7.4]
    steps:
      - name: Setup PHP extension
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
      - uses: actions/checkout@v2
      - run: find -L . -path ./vendor -prune -o -name '*.php' -print0 | xargs -0 -n 1 -P 4 php -l

  phpcs:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php: [5.6]
    steps:
      - name: Setup PHP extension
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          tools: >-
            php-cs-fixer,
            composer
      - uses: actions/checkout@v2
      - env:
          SITE: ${{ matrix.site }}
          WP_VERSION: ${{ matrix.wordpress }}
        run: |-
          export COMPOSER_VENDOR_DIR="$(composer -n config --global home)/vendor"
          export PATH="${COMPOSER_VENDOR_DIR}/bin:$PATH"

          composer global require squizlabs/php_codesniffer
          composer global require wp-coding-standards/wpcs
          composer global require phpcompatibility/php-compatibility
          composer global require phpcompatibility/phpcompatibility-paragonie
          composer global require phpcompatibility/phpcompatibility-wp
          phpcs --config-set installed_paths "${COMPOSER_VENDOR_DIR}/wp-coding-standards/wpcs,${COMPOSER_VENDOR_DIR}/phpcompatibility/php-compatibility,${COMPOSER_VENDOR_DIR}/phpcompatibility/phpcompatibility-paragonie,${COMPOSER_VENDOR_DIR}/phpcompatibility/phpcompatibility-wp"

      - run: phpcs --ignore=tests/bootstrap.php

  wp-version-check:
    runs-on: ubuntu-latest
    steps:
      - run: wget -nv -O "wp-latest.json" https://api.wordpress.org/core/version-check/1.7/
      - uses: actions/upload-artifact@v2
        with:
          name: wp-latest
          path: wp-latest.json

  wp-tests:
    needs: wp-version-check
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        php: [5.6, 7.4]
        wordpress: [latest, trunk, 4.5]
        multisite: [0, 1]
        exclude:
          - wordpress: trunk
            php: 5.6
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_DATABASE: wordpress_test
          MYSQL_USER: user
          MYSQL_PASSWORD: password
          MYSQL_RANDOM_ROOT_PASSWORD: 1
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    steps:
      - uses: actions/checkout@v2

      - name: Validate composer.json and composer.lock
        run: composer validate --strict

      - name: Cache Composer packages
        id: composer-cache
        uses: actions/cache@v2
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress

      - uses: actions/download-artifact@v2
        with:
          name: wp-latest
      - name: Setup WordPress tests suite
        env:
          WP_VERSION: ${{ matrix.wordpress }}
          WP_TESTS_DIR: ./wordpress-tests-lib
        run: |-
          set -u

          if [[ $WP_VERSION =~ ^[0-9]+\.[0-9]+\-(beta|RC)[0-9]+$ ]]; then
            WP_BRANCH=${WP_VERSION%\-*}
            WP_TESTS_TAG="branches/$WP_BRANCH"

          elif [[ $WP_VERSION =~ ^[0-9]+\.[0-9]+$ ]]; then
            WP_TESTS_TAG="branches/$WP_VERSION"
          elif [[ $WP_VERSION =~ [0-9]+\.[0-9]+\.[0-9]+ ]]; then
            if [[ $WP_VERSION =~ [0-9]+\.[0-9]+\.[0] ]]; then
              # version x.x.0 means the first release of the major version, so strip off the .0 and download version x.x
              WP_TESTS_TAG="tags/${WP_VERSION%??}"
            else
              WP_TESTS_TAG="tags/$WP_VERSION"
            fi
          elif [[ $WP_VERSION == 'nightly' || $WP_VERSION == 'trunk' ]]; then
            WP_TESTS_TAG="trunk"
          else
            LATEST_VERSION=$(jq -r '.offers[0].version' wp-latest.json)
            if [[ -z "$LATEST_VERSION" ]]; then
              echo "Latest WordPress version could not be found"
              exit 1
            fi
            WP_TESTS_TAG="tags/$LATEST_VERSION"
          fi

          svn export --quiet --ignore-externals https://develop.svn.wordpress.org/${WP_TESTS_TAG}/tests/phpunit/ "$WP_TESTS_DIR"
      - name: Setup WordPress
        env:
          WP_VERSION: ${{ matrix.wordpress }}
          ID: ${{ matrix.wordpress }}_${{ matrix.php }}_${{ matrix.multisite }}
          MYSQL_DATABASE: wordpress_test
          MYSQL_USER: user
          MYSQL_PASSWORD: password
          MYSQL_HOSTNAME: 127.0.0.1
          WP_MULTISITE: ${{ matrix.multisite }}
        working-directory: ./wordpress-tests-lib
        run: |-
          set -u

          wp core download \
            --version="$WP_VERSION"

          wget -nv -O "wp-content/db.php" https://raw.github.com/markoheijnen/wp-mysqli/master/db.php || \
          (curl https://raw.github.com/markoheijnen/wp-mysqli/master/db.php -sSL > wp-content/db.php)

          wp config create --force --skip-check \
            --dbname="$MYSQL_DATABASE" \
            --dbuser="$MYSQL_USER" \
            --dbpass="$MYSQL_PASSWORD" \
            --dbhost="$MYSQL_HOSTNAME" \
            --dbprefix="wp_${ID//./_}_" \
            --extra-php <<PHP
          define( 'WP_DEBUG_LOG', true );

          define( 'WP_TESTS_DOMAIN', '$WP_VERSION.wp-pendo.github' );
          define( 'WP_TESTS_EMAIL', 'pierre.peronnet+github-wp-pendo@gmail.com' );
          define( 'WP_TESTS_TITLE', 'Test $WP_VERSION' );
          define( 'WP_TESTS_MULTISITE', '$WP_MULTISITE' );
          PHP

          wp config list
          wp db check

          mv -v "wp-config.php" "wp-tests-config.php"
      - name: Run tests
        env:
          WP_MULTISITE: ${{ matrix.multisite }}
          WP_TESTS_DIR: ./wordpress-tests-lib
        run: |-
          phpunit
          test -f coverage.xml
          test -f result.xml
      - name: Report coverage
        if: always()
        run: bash <(curl -s https://codecov.io/bash)
      - name: Report results
        uses: EnricoMi/publish-unit-test-result-action/composite@v1
        if: always()
        with:
          files: result.xml
